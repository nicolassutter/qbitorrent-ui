// This file is auto-generated by @hey-api/openapi-ts

import {
  type Options as ClientOptions,
  type TDataShape,
  type Client,
  urlSearchParamsBodySerializer,
  formDataBodySerializer,
} from "@hey-api/client-fetch";
import type {
  AuthLoginPostData,
  AuthLoginPostResponse,
  AuthLogoutPostData,
  AppVersionGetData,
  AppVersionGetResponse,
  AppWebapiVersionGetData,
  AppWebapiVersionGetResponse,
  AppBuildInfoGetData,
  AppBuildInfoGetResponse,
  AppShutdownGetData,
  AppPreferencesGetData,
  AppPreferencesGetResponse,
  AppSetPreferencesPostData,
  AppDefaultSavePathGetData,
  AppDefaultSavePathGetResponse,
  LogMainPostData,
  LogMainPostResponse,
  LogPeersPostData,
  LogPeersPostResponse,
  SyncMaindataPostData,
  SyncMaindataPostResponse,
  SyncTorrentPeersPostData,
  SyncTorrentPeersPostResponse,
  TransferInfoGetData,
  TransferInfoGetResponse,
  TransferSpeedLimitsModeGetData,
  TransferSpeedLimitsModeGetResponse,
  TransferToggleSpeedLimitsModeGetData,
  TransferDownloadLimitGetData,
  TransferDownloadLimitGetResponse,
  TransferSetDownloadLimitPostData,
  TransferUploadLimitGetData,
  TransferUploadLimitGetResponse,
  TransferSetUploadLimitPostData,
  TransferBanPeersPostData,
  TorrentsInfoPostData,
  TorrentsInfoPostResponse,
  TorrentsPropertiesPostData,
  TorrentsPropertiesPostResponse,
  TorrentsTrackersPostData,
  TorrentsTrackersPostResponse,
  TorrentWebseedsPostData,
  TorrentWebseedsPostResponse,
  TorrentsFilesPostData,
  TorrentsFilesPostResponse,
  TorrentsPieceStatesPostData,
  TorrentsPieceStatesPostResponse,
  TorrentsPieceHashesPostData,
  TorrentsPieceHashesPostResponse,
  TorrentsPausePostData,
  TorrentsResumePostData,
  TorrentsDeletePostData,
  TorrentsRecheckPostData,
  TorrentsReannouncePostData,
  TorrentsAddPostData,
  TorrentsAddTrackersPostData,
  TorrentsEditTrackerPostData,
  TorrentsRemoveTrackersPostData,
  TorrentsAddPeersPostData,
  TorrentsIncreasePrioPostData,
  TorrentsDecreasePrioPostData,
  TorrentsTopPrioPostData,
  TorrentsBottomPrioPostData,
  TorrentsFilePrioPostData,
  TorrentsDownloadLimitPostData,
  TorrentsDownloadLimitPostResponse,
  TorrentsSetDownloadLimitPostData,
  TorrentsSetShareLimitsPostData,
  TorrentsUploadLimitPostData,
  TorrentsUploadLimitPostResponse,
  TorrentsSetUploadLimitPostData,
  TorrentsSetLocationPostData,
  TorrentsRenamePostData,
  TorrentsSetCategoryPostData,
  TorrentsCategoriesGetData,
  TorrentsCategoriesGetResponse,
  TorrentsCreateCategoryPostData,
  TorrentsEditCategoryPostData,
  TorrentsRemoveCategoriesPostData,
  TorrentsAddTagsPostData,
  TorrentsRemoveTagsPostData,
  TorrentsTagsGetData,
  TorrentsTagsGetResponse,
  TorrentsCreateTagsPostData,
  TorrentsDeleteTagsPostData,
  TorrentsSetAutoManagementPostData,
  TorrentsToggleSequentialDownloadPostData,
  TorrentsToggleFirstLastPiecePrioPostData,
  TorrentsSetForceStartPostData,
  TorrentsSetSuperSeedingPostData,
  TorrentsRenameFilePostData,
  TorrentsRenameFolderPostData,
  RssAddFolderPostData,
  RssAddFeedPostData,
  RssRemoveItemPostData,
  RssMoveItemPostData,
  RssItemsPostData,
  RssItemsPostResponse,
  RssMarkAsReadPostData,
  RssRefreshItemPostData,
  RssSetRulePostData,
  RssRenameRulePostData,
  RssRemoveRulePostData,
  RssRulesGetData,
  RssRulesGetResponse,
  RssMatchingArticlesPostData,
  RssMatchingArticlesPostResponse,
  SearchStartPostData,
  SearchStartPostResponse,
  SearchStopPostData,
  SearchStatusPostData,
  SearchStatusPostResponse,
  SearchResultsPostData,
  SearchResultsPostResponse,
  SearchDeletePostData,
  SearchPluginsGetData,
  SearchPluginsGetResponse,
  SearchInstallPluginPostData,
  SearchUninstallPluginPostData,
  SearchEnablePluginPostData,
  SearchUpdatePluginsPostData,
} from "./types.gen";
import { client as _heyApiClient } from "./client.gen";

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean,
> = ClientOptions<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client;
};

/**
 * Login
 * Upon success, the response will contain a cookie with your SID. You must supply the cookie whenever you want to perform an operation that requires authentication.
 *
 */
export const authLoginPost = <ThrowOnError extends boolean = false>(
  options: Options<AuthLoginPostData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    AuthLoginPostResponse,
    unknown,
    ThrowOnError
  >({
    ...urlSearchParamsBodySerializer,
    url: "/auth/login",
    ...options,
    headers: {
      "Content-Type": "application/x-www-form-urlencoded",
      ...options?.headers,
    },
  });
};

/**
 * Logout
 */
export const authLogoutPost = <ThrowOnError extends boolean = false>(
  options?: Options<AuthLogoutPostData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    unknown,
    unknown,
    ThrowOnError
  >({
    url: "/auth/logout",
    ...options,
  });
};

/**
 * Get application version
 */
export const appVersionGet = <ThrowOnError extends boolean = false>(
  options?: Options<AppVersionGetData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    AppVersionGetResponse,
    unknown,
    ThrowOnError
  >({
    url: "/app/version",
    ...options,
  });
};

/**
 * Get API version
 */
export const appWebapiVersionGet = <ThrowOnError extends boolean = false>(
  options?: Options<AppWebapiVersionGetData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    AppWebapiVersionGetResponse,
    unknown,
    ThrowOnError
  >({
    url: "/app/webapiVersion",
    ...options,
  });
};

/**
 * Get build info
 */
export const appBuildInfoGet = <ThrowOnError extends boolean = false>(
  options?: Options<AppBuildInfoGetData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    AppBuildInfoGetResponse,
    unknown,
    ThrowOnError
  >({
    url: "/app/buildInfo",
    ...options,
  });
};

/**
 * Shutdown application
 */
export const appShutdownGet = <ThrowOnError extends boolean = false>(
  options?: Options<AppShutdownGetData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>(
    {
      url: "/app/shutdown",
      ...options,
    },
  );
};

/**
 * Get application preferences
 */
export const appPreferencesGet = <ThrowOnError extends boolean = false>(
  options?: Options<AppPreferencesGetData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    AppPreferencesGetResponse,
    unknown,
    ThrowOnError
  >({
    url: "/app/preferences",
    ...options,
  });
};

/**
 * Set application preferences
 * Notes:
 * 1. There is no need to pass all possible preferences' `token:value` pairs if you only want to change one option
 * 2. Paths in `scan_dirs` must exist, otherwise this option will have no effect
 * 3. String values must be quoted; integer and boolean values must never be quoted
 *
 * For a list of possible preference options see [Get application preferences](https://github.com/qbittorrent/qBittorrent/wiki/WebUI-API-(qBittorrent-4.1)#get-application-preferences)
 *
 */
export const appSetPreferencesPost = <ThrowOnError extends boolean = false>(
  options: Options<AppSetPreferencesPostData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>(
    {
      ...urlSearchParamsBodySerializer,
      url: "/app/setPreferences",
      ...options,
      headers: {
        "Content-Type": "application/x-www-form-urlencoded",
        ...options?.headers,
      },
    },
  );
};

/**
 * Get default save path
 */
export const appDefaultSavePathGet = <ThrowOnError extends boolean = false>(
  options?: Options<AppDefaultSavePathGetData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    AppDefaultSavePathGetResponse,
    unknown,
    ThrowOnError
  >({
    url: "/app/defaultSavePath",
    ...options,
  });
};

/**
 * Get log
 */
export const logMainPost = <ThrowOnError extends boolean = false>(
  options: Options<LogMainPostData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    LogMainPostResponse,
    unknown,
    ThrowOnError
  >({
    ...urlSearchParamsBodySerializer,
    url: "/log/main",
    ...options,
    headers: {
      "Content-Type": "application/x-www-form-urlencoded",
      ...options?.headers,
    },
  });
};

/**
 * Get peer log
 */
export const logPeersPost = <ThrowOnError extends boolean = false>(
  options: Options<LogPeersPostData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    LogPeersPostResponse,
    unknown,
    ThrowOnError
  >({
    ...urlSearchParamsBodySerializer,
    url: "/log/peers",
    ...options,
    headers: {
      "Content-Type": "application/x-www-form-urlencoded",
      ...options?.headers,
    },
  });
};

/**
 * Get main data
 */
export const syncMaindataPost = <ThrowOnError extends boolean = false>(
  options: Options<SyncMaindataPostData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    SyncMaindataPostResponse,
    unknown,
    ThrowOnError
  >({
    ...urlSearchParamsBodySerializer,
    url: "/sync/maindata",
    ...options,
    headers: {
      "Content-Type": "application/x-www-form-urlencoded",
      ...options?.headers,
    },
  });
};

/**
 * Get torrent peers data
 */
export const syncTorrentPeersPost = <ThrowOnError extends boolean = false>(
  options: Options<SyncTorrentPeersPostData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    SyncTorrentPeersPostResponse,
    unknown,
    ThrowOnError
  >({
    ...urlSearchParamsBodySerializer,
    url: "/sync/torrentPeers",
    ...options,
    headers: {
      "Content-Type": "application/x-www-form-urlencoded",
      ...options?.headers,
    },
  });
};

/**
 * Get global transfer info
 * This method returns info you usually see in qBt status bar.
 */
export const transferInfoGet = <ThrowOnError extends boolean = false>(
  options?: Options<TransferInfoGetData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    TransferInfoGetResponse,
    unknown,
    ThrowOnError
  >({
    url: "/transfer/info",
    ...options,
  });
};

/**
 * Get alternative speed limits state
 */
export const transferSpeedLimitsModeGet = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<TransferSpeedLimitsModeGetData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    TransferSpeedLimitsModeGetResponse,
    unknown,
    ThrowOnError
  >({
    url: "/transfer/speedLimitsMode",
    ...options,
  });
};

/**
 * Toggle alternative speed limits
 */
export const transferToggleSpeedLimitsModeGet = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<TransferToggleSpeedLimitsModeGetData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>(
    {
      url: "/transfer/toggleSpeedLimitsMode",
      ...options,
    },
  );
};

/**
 * Get global download limit
 */
export const transferDownloadLimitGet = <ThrowOnError extends boolean = false>(
  options?: Options<TransferDownloadLimitGetData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    TransferDownloadLimitGetResponse,
    unknown,
    ThrowOnError
  >({
    url: "/transfer/downloadLimit",
    ...options,
  });
};

/**
 * Set global download limit
 */
export const transferSetDownloadLimitPost = <
  ThrowOnError extends boolean = false,
>(
  options: Options<TransferSetDownloadLimitPostData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>(
    {
      ...urlSearchParamsBodySerializer,
      url: "/transfer/setDownloadLimit",
      ...options,
      headers: {
        "Content-Type": "application/x-www-form-urlencoded",
        ...options?.headers,
      },
    },
  );
};

/**
 * Get global upload limit
 */
export const transferUploadLimitGet = <ThrowOnError extends boolean = false>(
  options?: Options<TransferUploadLimitGetData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    TransferUploadLimitGetResponse,
    unknown,
    ThrowOnError
  >({
    url: "/transfer/uploadLimit",
    ...options,
  });
};

/**
 * Set global upload limit
 */
export const transferSetUploadLimitPost = <
  ThrowOnError extends boolean = false,
>(
  options: Options<TransferSetUploadLimitPostData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>(
    {
      ...urlSearchParamsBodySerializer,
      url: "/transfer/setUploadLimit",
      ...options,
      headers: {
        "Content-Type": "application/x-www-form-urlencoded",
        ...options?.headers,
      },
    },
  );
};

/**
 * Ban peers
 */
export const transferBanPeersPost = <ThrowOnError extends boolean = false>(
  options: Options<TransferBanPeersPostData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>(
    {
      ...urlSearchParamsBodySerializer,
      url: "/transfer/banPeers",
      ...options,
      headers: {
        "Content-Type": "application/x-www-form-urlencoded",
        ...options?.headers,
      },
    },
  );
};

/**
 * Get torrent list
 */
export const torrentsInfoPost = <ThrowOnError extends boolean = false>(
  options: Options<TorrentsInfoPostData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    TorrentsInfoPostResponse,
    unknown,
    ThrowOnError
  >({
    ...urlSearchParamsBodySerializer,
    url: "/torrents/info",
    ...options,
    headers: {
      "Content-Type": "application/x-www-form-urlencoded",
      ...options?.headers,
    },
  });
};

/**
 * Get torrent generic properties
 * Requires knowing the torrent hash. You can get it from [torrent list](https://github.com/qbittorrent/qBittorrent/wiki/WebUI-API-(qBittorrent-4.1)#get-torrent-list).
 */
export const torrentsPropertiesPost = <ThrowOnError extends boolean = false>(
  options: Options<TorrentsPropertiesPostData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    TorrentsPropertiesPostResponse,
    unknown,
    ThrowOnError
  >({
    ...urlSearchParamsBodySerializer,
    url: "/torrents/properties",
    ...options,
    headers: {
      "Content-Type": "application/x-www-form-urlencoded",
      ...options?.headers,
    },
  });
};

/**
 * Get torrent trackers
 * Requires knowing the torrent hash. You can get it from [torrent list](https://github.com/qbittorrent/qBittorrent/wiki/WebUI-API-(qBittorrent-4.1)#get-torrent-list).
 */
export const torrentsTrackersPost = <ThrowOnError extends boolean = false>(
  options: Options<TorrentsTrackersPostData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    TorrentsTrackersPostResponse,
    unknown,
    ThrowOnError
  >({
    ...urlSearchParamsBodySerializer,
    url: "/torrents/trackers",
    ...options,
    headers: {
      "Content-Type": "application/x-www-form-urlencoded",
      ...options?.headers,
    },
  });
};

/**
 * Get torrent web seeds
 * Requires knowing the torrent hash. You can get it from [torrent list](https://github.com/qbittorrent/qBittorrent/wiki/WebUI-API-(qBittorrent-4.1)#get-torrent-list).
 */
export const torrentWebseedsPost = <ThrowOnError extends boolean = false>(
  options: Options<TorrentWebseedsPostData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    TorrentWebseedsPostResponse,
    unknown,
    ThrowOnError
  >({
    ...urlSearchParamsBodySerializer,
    url: "/torrents/webseeds",
    ...options,
    headers: {
      "Content-Type": "application/x-www-form-urlencoded",
      ...options?.headers,
    },
  });
};

/**
 * Get torrent contents
 * Requires knowing the torrent hash. You can get it from [torrent list](https://github.com/qbittorrent/qBittorrent/wiki/WebUI-API-(qBittorrent-4.1)#get-torrent-list).
 */
export const torrentsFilesPost = <ThrowOnError extends boolean = false>(
  options: Options<TorrentsFilesPostData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    TorrentsFilesPostResponse,
    unknown,
    ThrowOnError
  >({
    ...urlSearchParamsBodySerializer,
    url: "/torrents/files",
    ...options,
    headers: {
      "Content-Type": "application/x-www-form-urlencoded",
      ...options?.headers,
    },
  });
};

/**
 * Get torrent pieces' states
 * Requires knowing the torrent hash. You can get it from [torrent list](https://github.com/qbittorrent/qBittorrent/wiki/WebUI-API-(qBittorrent-4.1)#get-torrent-list).
 */
export const torrentsPieceStatesPost = <ThrowOnError extends boolean = false>(
  options: Options<TorrentsPieceStatesPostData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    TorrentsPieceStatesPostResponse,
    unknown,
    ThrowOnError
  >({
    ...urlSearchParamsBodySerializer,
    url: "/torrents/pieceStates",
    ...options,
    headers: {
      "Content-Type": "application/x-www-form-urlencoded",
      ...options?.headers,
    },
  });
};

/**
 * Get torrent pieces' hashes
 * Requires knowing the torrent hash. You can get it from [torrent list](https://github.com/qbittorrent/qBittorrent/wiki/WebUI-API-(qBittorrent-4.1)#get-torrent-list).
 */
export const torrentsPieceHashesPost = <ThrowOnError extends boolean = false>(
  options: Options<TorrentsPieceHashesPostData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    TorrentsPieceHashesPostResponse,
    unknown,
    ThrowOnError
  >({
    ...urlSearchParamsBodySerializer,
    url: "/torrents/pieceHashes",
    ...options,
    headers: {
      "Content-Type": "application/x-www-form-urlencoded",
      ...options?.headers,
    },
  });
};

/**
 * Pause torrents
 * Requires knowing the torrent hashes. You can get it from [torrent list](https://github.com/qbittorrent/qBittorrent/wiki/WebUI-API-(qBittorrent-4.1)#get-torrent-list).
 */
export const torrentsPausePost = <ThrowOnError extends boolean = false>(
  options: Options<TorrentsPausePostData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>(
    {
      ...urlSearchParamsBodySerializer,
      url: "/torrents/pause",
      ...options,
      headers: {
        "Content-Type": "application/x-www-form-urlencoded",
        ...options?.headers,
      },
    },
  );
};

/**
 * Resume torrents
 * Requires knowing the torrent hashes. You can get it from [torrent list](https://github.com/qbittorrent/qBittorrent/wiki/WebUI-API-(qBittorrent-4.1)#get-torrent-list).
 */
export const torrentsResumePost = <ThrowOnError extends boolean = false>(
  options: Options<TorrentsResumePostData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>(
    {
      ...urlSearchParamsBodySerializer,
      url: "/torrents/resume",
      ...options,
      headers: {
        "Content-Type": "application/x-www-form-urlencoded",
        ...options?.headers,
      },
    },
  );
};

/**
 * Delete torrents
 * Requires knowing the torrent hashes. You can get it from [torrent list](https://github.com/qbittorrent/qBittorrent/wiki/WebUI-API-(qBittorrent-4.1)#get-torrent-list).
 */
export const torrentsDeletePost = <ThrowOnError extends boolean = false>(
  options: Options<TorrentsDeletePostData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>(
    {
      ...urlSearchParamsBodySerializer,
      url: "/torrents/delete",
      ...options,
      headers: {
        "Content-Type": "application/x-www-form-urlencoded",
        ...options?.headers,
      },
    },
  );
};

/**
 * Recheck torrents
 * Requires knowing the torrent hashes. You can get it from [torrent list](https://github.com/qbittorrent/qBittorrent/wiki/WebUI-API-(qBittorrent-4.1)#get-torrent-list).
 */
export const torrentsRecheckPost = <ThrowOnError extends boolean = false>(
  options: Options<TorrentsRecheckPostData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>(
    {
      ...urlSearchParamsBodySerializer,
      url: "/torrents/recheck",
      ...options,
      headers: {
        "Content-Type": "application/x-www-form-urlencoded",
        ...options?.headers,
      },
    },
  );
};

/**
 * Reannounce torrents
 * Requires knowing the torrent hashes. You can get it from [torrent list](https://github.com/qbittorrent/qBittorrent/wiki/WebUI-API-(qBittorrent-4.1)#get-torrent-list).
 */
export const torrentsReannouncePost = <ThrowOnError extends boolean = false>(
  options: Options<TorrentsReannouncePostData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>(
    {
      ...urlSearchParamsBodySerializer,
      url: "/torrents/reannounce",
      ...options,
      headers: {
        "Content-Type": "application/x-www-form-urlencoded",
        ...options?.headers,
      },
    },
  );
};

/**
 * Add new torrent
 * This method can add torrents from server local file or from URLs. `http://`, `https://`, `magnet:` and `bc://bt/` links are supported.
 */
export const torrentsAddPost = <ThrowOnError extends boolean = false>(
  options: Options<TorrentsAddPostData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>(
    {
      ...formDataBodySerializer,
      url: "/torrents/add",
      ...options,
      headers: {
        "Content-Type": null,
        ...options?.headers,
      },
    },
  );
};

/**
 * Add trackers to torrent
 * Requires knowing the torrent hash. You can get it from [torrent list](https://github.com/qbittorrent/qBittorrent/wiki/WebUI-API-(qBittorrent-4.1)#get-torrent-list).
 */
export const torrentsAddTrackersPost = <ThrowOnError extends boolean = false>(
  options: Options<TorrentsAddTrackersPostData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>(
    {
      ...urlSearchParamsBodySerializer,
      url: "/torrents/addTrackers",
      ...options,
      headers: {
        "Content-Type": "application/x-www-form-urlencoded",
        ...options?.headers,
      },
    },
  );
};

/**
 * Edit trackers
 */
export const torrentsEditTrackerPost = <ThrowOnError extends boolean = false>(
  options: Options<TorrentsEditTrackerPostData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>(
    {
      ...urlSearchParamsBodySerializer,
      url: "/torrents/editTracker",
      ...options,
      headers: {
        "Content-Type": "application/x-www-form-urlencoded",
        ...options?.headers,
      },
    },
  );
};

/**
 * Remove trackers
 */
export const torrentsRemoveTrackersPost = <
  ThrowOnError extends boolean = false,
>(
  options: Options<TorrentsRemoveTrackersPostData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>(
    {
      ...urlSearchParamsBodySerializer,
      url: "/torrents/removeTrackers",
      ...options,
      headers: {
        "Content-Type": "application/x-www-form-urlencoded",
        ...options?.headers,
      },
    },
  );
};

/**
 * Add peers
 */
export const torrentsAddPeersPost = <ThrowOnError extends boolean = false>(
  options: Options<TorrentsAddPeersPostData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>(
    {
      ...urlSearchParamsBodySerializer,
      url: "/torrents/addPeers",
      ...options,
      headers: {
        "Content-Type": "application/x-www-form-urlencoded",
        ...options?.headers,
      },
    },
  );
};

/**
 * Increase torrent priority
 * Requires knowing the torrent hash. You can get it from [torrent list](https://github.com/qbittorrent/qBittorrent/wiki/WebUI-API-(qBittorrent-4.1)#get-torrent-list).
 */
export const torrentsIncreasePrioPost = <ThrowOnError extends boolean = false>(
  options: Options<TorrentsIncreasePrioPostData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>(
    {
      ...urlSearchParamsBodySerializer,
      url: "/torrents/increasePrio",
      ...options,
      headers: {
        "Content-Type": "application/x-www-form-urlencoded",
        ...options?.headers,
      },
    },
  );
};

/**
 * Decrease torrent priority
 * Requires knowing the torrent hash. You can get it from [torrent list](https://github.com/qbittorrent/qBittorrent/wiki/WebUI-API-(qBittorrent-4.1)#get-torrent-list).
 */
export const torrentsDecreasePrioPost = <ThrowOnError extends boolean = false>(
  options: Options<TorrentsDecreasePrioPostData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>(
    {
      ...urlSearchParamsBodySerializer,
      url: "/torrents/decreasePrio",
      ...options,
      headers: {
        "Content-Type": "application/x-www-form-urlencoded",
        ...options?.headers,
      },
    },
  );
};

/**
 * Maximal torrent priority
 * Requires knowing the torrent hash. You can get it from [torrent list](https://github.com/qbittorrent/qBittorrent/wiki/WebUI-API-(qBittorrent-4.1)#get-torrent-list).
 */
export const torrentsTopPrioPost = <ThrowOnError extends boolean = false>(
  options: Options<TorrentsTopPrioPostData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>(
    {
      ...urlSearchParamsBodySerializer,
      url: "/torrents/topPrio",
      ...options,
      headers: {
        "Content-Type": "application/x-www-form-urlencoded",
        ...options?.headers,
      },
    },
  );
};

/**
 * Minimal torrent priority
 * Requires knowing the torrent hash. You can get it from [torrent list](https://github.com/qbittorrent/qBittorrent/wiki/WebUI-API-(qBittorrent-4.1)#get-torrent-list).
 */
export const torrentsBottomPrioPost = <ThrowOnError extends boolean = false>(
  options: Options<TorrentsBottomPrioPostData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>(
    {
      ...urlSearchParamsBodySerializer,
      url: "/torrents/bottomPrio",
      ...options,
      headers: {
        "Content-Type": "application/x-www-form-urlencoded",
        ...options?.headers,
      },
    },
  );
};

/**
 * Set file priority
 */
export const torrentsFilePrioPost = <ThrowOnError extends boolean = false>(
  options: Options<TorrentsFilePrioPostData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>(
    {
      ...urlSearchParamsBodySerializer,
      url: "/torrents/filePrio",
      ...options,
      headers: {
        "Content-Type": "application/x-www-form-urlencoded",
        ...options?.headers,
      },
    },
  );
};

/**
 * Get torrent download limit
 * Requires knowing the torrent hash. You can get it from [torrent list](https://github.com/qbittorrent/qBittorrent/wiki/WebUI-API-(qBittorrent-4.1)#get-torrent-list).
 */
export const torrentsDownloadLimitPost = <ThrowOnError extends boolean = false>(
  options: Options<TorrentsDownloadLimitPostData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    TorrentsDownloadLimitPostResponse,
    unknown,
    ThrowOnError
  >({
    ...urlSearchParamsBodySerializer,
    url: "/torrents/downloadLimit",
    ...options,
    headers: {
      "Content-Type": "application/x-www-form-urlencoded",
      ...options?.headers,
    },
  });
};

/**
 * Set torrent download limit
 * Requires knowing the torrent hash. You can get it from [torrent list](https://github.com/qbittorrent/qBittorrent/wiki/WebUI-API-(qBittorrent-4.1)#get-torrent-list).
 */
export const torrentsSetDownloadLimitPost = <
  ThrowOnError extends boolean = false,
>(
  options: Options<TorrentsSetDownloadLimitPostData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>(
    {
      ...urlSearchParamsBodySerializer,
      url: "/torrents/setDownloadLimit",
      ...options,
      headers: {
        "Content-Type": "application/x-www-form-urlencoded",
        ...options?.headers,
      },
    },
  );
};

/**
 * Set torrent share limit
 * Requires knowing the torrent hash. You can get it from [torrent list](https://github.com/qbittorrent/qBittorrent/wiki/WebUI-API-(qBittorrent-4.1)#get-torrent-list).
 */
export const torrentsSetShareLimitsPost = <
  ThrowOnError extends boolean = false,
>(
  options: Options<TorrentsSetShareLimitsPostData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>(
    {
      ...urlSearchParamsBodySerializer,
      url: "/torrents/setShareLimits",
      ...options,
      headers: {
        "Content-Type": "application/x-www-form-urlencoded",
        ...options?.headers,
      },
    },
  );
};

/**
 * Get torrent upload limit
 * Requires knowing the torrent hash. You can get it from [torrent list](https://github.com/qbittorrent/qBittorrent/wiki/WebUI-API-(qBittorrent-4.1)#get-torrent-list).
 */
export const torrentsUploadLimitPost = <ThrowOnError extends boolean = false>(
  options: Options<TorrentsUploadLimitPostData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    TorrentsUploadLimitPostResponse,
    unknown,
    ThrowOnError
  >({
    ...urlSearchParamsBodySerializer,
    url: "/torrents/uploadLimit",
    ...options,
    headers: {
      "Content-Type": "application/x-www-form-urlencoded",
      ...options?.headers,
    },
  });
};

/**
 * Set torrent upload limit
 * Requires knowing the torrent hash. You can get it from [torrent list](https://github.com/qbittorrent/qBittorrent/wiki/WebUI-API-(qBittorrent-4.1)#get-torrent-list).
 */
export const torrentsSetUploadLimitPost = <
  ThrowOnError extends boolean = false,
>(
  options: Options<TorrentsSetUploadLimitPostData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>(
    {
      ...urlSearchParamsBodySerializer,
      url: "/torrents/setUploadLimit",
      ...options,
      headers: {
        "Content-Type": "application/x-www-form-urlencoded",
        ...options?.headers,
      },
    },
  );
};

/**
 * Set torrent location
 * Requires knowing the torrent hash. You can get it from [torrent list](https://github.com/qbittorrent/qBittorrent/wiki/WebUI-API-(qBittorrent-4.1)#get-torrent-list).
 */
export const torrentsSetLocationPost = <ThrowOnError extends boolean = false>(
  options: Options<TorrentsSetLocationPostData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>(
    {
      ...urlSearchParamsBodySerializer,
      url: "/torrents/setLocation",
      ...options,
      headers: {
        "Content-Type": "application/x-www-form-urlencoded",
        ...options?.headers,
      },
    },
  );
};

/**
 * Set torrent name
 * Requires knowing the torrent hash. You can get it from [torrent list](https://github.com/qbittorrent/qBittorrent/wiki/WebUI-API-(qBittorrent-4.1)#get-torrent-list).
 */
export const torrentsRenamePost = <ThrowOnError extends boolean = false>(
  options: Options<TorrentsRenamePostData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>(
    {
      ...urlSearchParamsBodySerializer,
      url: "/torrents/rename",
      ...options,
      headers: {
        "Content-Type": "application/x-www-form-urlencoded",
        ...options?.headers,
      },
    },
  );
};

/**
 * Set torrent category
 * Requires knowing the torrent hash. You can get it from [torrent list](https://github.com/qbittorrent/qBittorrent/wiki/WebUI-API-(qBittorrent-4.1)#get-torrent-list).
 */
export const torrentsSetCategoryPost = <ThrowOnError extends boolean = false>(
  options: Options<TorrentsSetCategoryPostData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>(
    {
      ...urlSearchParamsBodySerializer,
      url: "/torrents/setCategory",
      ...options,
      headers: {
        "Content-Type": "application/x-www-form-urlencoded",
        ...options?.headers,
      },
    },
  );
};

/**
 * Get all categories
 */
export const torrentsCategoriesGet = <ThrowOnError extends boolean = false>(
  options?: Options<TorrentsCategoriesGetData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    TorrentsCategoriesGetResponse,
    unknown,
    ThrowOnError
  >({
    url: "/torrents/categories",
    ...options,
  });
};

/**
 * Add new category
 */
export const torrentsCreateCategoryPost = <
  ThrowOnError extends boolean = false,
>(
  options: Options<TorrentsCreateCategoryPostData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>(
    {
      ...urlSearchParamsBodySerializer,
      url: "/torrents/createCategory",
      ...options,
      headers: {
        "Content-Type": "application/x-www-form-urlencoded",
        ...options?.headers,
      },
    },
  );
};

/**
 * Edit category
 */
export const torrentsEditCategoryPost = <ThrowOnError extends boolean = false>(
  options: Options<TorrentsEditCategoryPostData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>(
    {
      ...urlSearchParamsBodySerializer,
      url: "/torrents/editCategory",
      ...options,
      headers: {
        "Content-Type": "application/x-www-form-urlencoded",
        ...options?.headers,
      },
    },
  );
};

/**
 * Remove categories
 */
export const torrentsRemoveCategoriesPost = <
  ThrowOnError extends boolean = false,
>(
  options: Options<TorrentsRemoveCategoriesPostData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>(
    {
      ...urlSearchParamsBodySerializer,
      url: "/torrents/removeCategories",
      ...options,
      headers: {
        "Content-Type": "application/x-www-form-urlencoded",
        ...options?.headers,
      },
    },
  );
};

/**
 * Add torrent tags
 * Requires knowing the torrent hash. You can get it from [torrent list](https://github.com/qbittorrent/qBittorrent/wiki/WebUI-API-(qBittorrent-4.1)#get-torrent-list).
 */
export const torrentsAddTagsPost = <ThrowOnError extends boolean = false>(
  options: Options<TorrentsAddTagsPostData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>(
    {
      ...urlSearchParamsBodySerializer,
      url: "/torrents/addTags",
      ...options,
      headers: {
        "Content-Type": "application/x-www-form-urlencoded",
        ...options?.headers,
      },
    },
  );
};

/**
 * Remove torrent tags
 * Requires knowing the torrent hash. You can get it from [torrent list](https://github.com/qbittorrent/qBittorrent/wiki/WebUI-API-(qBittorrent-4.1)#get-torrent-list).
 */
export const torrentsRemoveTagsPost = <ThrowOnError extends boolean = false>(
  options: Options<TorrentsRemoveTagsPostData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>(
    {
      ...urlSearchParamsBodySerializer,
      url: "/torrents/removeTags",
      ...options,
      headers: {
        "Content-Type": "application/x-www-form-urlencoded",
        ...options?.headers,
      },
    },
  );
};

/**
 * Get all tags
 */
export const torrentsTagsGet = <ThrowOnError extends boolean = false>(
  options?: Options<TorrentsTagsGetData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    TorrentsTagsGetResponse,
    unknown,
    ThrowOnError
  >({
    url: "/torrents/tags",
    ...options,
  });
};

/**
 * Create tags
 */
export const torrentsCreateTagsPost = <ThrowOnError extends boolean = false>(
  options: Options<TorrentsCreateTagsPostData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>(
    {
      ...urlSearchParamsBodySerializer,
      url: "/torrents/createTags",
      ...options,
      headers: {
        "Content-Type": "application/x-www-form-urlencoded",
        ...options?.headers,
      },
    },
  );
};

/**
 * Delete tags
 */
export const torrentsDeleteTagsPost = <ThrowOnError extends boolean = false>(
  options: Options<TorrentsDeleteTagsPostData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>(
    {
      ...urlSearchParamsBodySerializer,
      url: "/torrents/deleteTags",
      ...options,
      headers: {
        "Content-Type": "application/x-www-form-urlencoded",
        ...options?.headers,
      },
    },
  );
};

/**
 * Set automatic torrent management
 * Requires knowing the torrent hash. You can get it from [torrent list](https://github.com/qbittorrent/qBittorrent/wiki/WebUI-API-(qBittorrent-4.1)#get-torrent-list).
 */
export const torrentsSetAutoManagementPost = <
  ThrowOnError extends boolean = false,
>(
  options: Options<TorrentsSetAutoManagementPostData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>(
    {
      ...urlSearchParamsBodySerializer,
      url: "/torrents/setAutoManagement",
      ...options,
      headers: {
        "Content-Type": "application/x-www-form-urlencoded",
        ...options?.headers,
      },
    },
  );
};

/**
 * Toggle sequential download
 * Requires knowing the torrent hash. You can get it from [torrent list](https://github.com/qbittorrent/qBittorrent/wiki/WebUI-API-(qBittorrent-4.1)#get-torrent-list).
 */
export const torrentsToggleSequentialDownloadPost = <
  ThrowOnError extends boolean = false,
>(
  options: Options<TorrentsToggleSequentialDownloadPostData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>(
    {
      ...urlSearchParamsBodySerializer,
      url: "/torrents/toggleSequentialDownload",
      ...options,
      headers: {
        "Content-Type": "application/x-www-form-urlencoded",
        ...options?.headers,
      },
    },
  );
};

/**
 * Set first/last piece priority
 * Requires knowing the torrent hash. You can get it from [torrent list](https://github.com/qbittorrent/qBittorrent/wiki/WebUI-API-(qBittorrent-4.1)#get-torrent-list).
 */
export const torrentsToggleFirstLastPiecePrioPost = <
  ThrowOnError extends boolean = false,
>(
  options: Options<TorrentsToggleFirstLastPiecePrioPostData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>(
    {
      ...urlSearchParamsBodySerializer,
      url: "/torrents/toggleFirstLastPiecePrio",
      ...options,
      headers: {
        "Content-Type": "application/x-www-form-urlencoded",
        ...options?.headers,
      },
    },
  );
};

/**
 * Set force start
 * Requires knowing the torrent hash. You can get it from [torrent list](https://github.com/qbittorrent/qBittorrent/wiki/WebUI-API-(qBittorrent-4.1)#get-torrent-list).
 */
export const torrentsSetForceStartPost = <ThrowOnError extends boolean = false>(
  options: Options<TorrentsSetForceStartPostData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>(
    {
      ...urlSearchParamsBodySerializer,
      url: "/torrents/setForceStart",
      ...options,
      headers: {
        "Content-Type": "application/x-www-form-urlencoded",
        ...options?.headers,
      },
    },
  );
};

/**
 * Set super seeding
 * Requires knowing the torrent hash. You can get it from [torrent list](https://github.com/qbittorrent/qBittorrent/wiki/WebUI-API-(qBittorrent-4.1)#get-torrent-list).
 */
export const torrentsSetSuperSeedingPost = <
  ThrowOnError extends boolean = false,
>(
  options: Options<TorrentsSetSuperSeedingPostData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>(
    {
      ...urlSearchParamsBodySerializer,
      url: "/torrents/setSuperSeeding",
      ...options,
      headers: {
        "Content-Type": "application/x-www-form-urlencoded",
        ...options?.headers,
      },
    },
  );
};

/**
 * Rename file
 */
export const torrentsRenameFilePost = <ThrowOnError extends boolean = false>(
  options: Options<TorrentsRenameFilePostData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>(
    {
      ...urlSearchParamsBodySerializer,
      url: "/torrents/renameFile",
      ...options,
      headers: {
        "Content-Type": "application/x-www-form-urlencoded",
        ...options?.headers,
      },
    },
  );
};

/**
 * Rename folder
 */
export const torrentsRenameFolderPost = <ThrowOnError extends boolean = false>(
  options: Options<TorrentsRenameFolderPostData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>(
    {
      ...urlSearchParamsBodySerializer,
      url: "/torrents/renameFolder",
      ...options,
      headers: {
        "Content-Type": "application/x-www-form-urlencoded",
        ...options?.headers,
      },
    },
  );
};

/**
 * Add folder
 */
export const rssAddFolderPost = <ThrowOnError extends boolean = false>(
  options: Options<RssAddFolderPostData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>(
    {
      ...urlSearchParamsBodySerializer,
      url: "/rss/addFolder",
      ...options,
      headers: {
        "Content-Type": "application/x-www-form-urlencoded",
        ...options?.headers,
      },
    },
  );
};

/**
 * Add feed
 */
export const rssAddFeedPost = <ThrowOnError extends boolean = false>(
  options: Options<RssAddFeedPostData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>(
    {
      ...urlSearchParamsBodySerializer,
      url: "/rss/addFeed",
      ...options,
      headers: {
        "Content-Type": "application/x-www-form-urlencoded",
        ...options?.headers,
      },
    },
  );
};

/**
 * Remove item
 */
export const rssRemoveItemPost = <ThrowOnError extends boolean = false>(
  options: Options<RssRemoveItemPostData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>(
    {
      ...urlSearchParamsBodySerializer,
      url: "/rss/removeItem",
      ...options,
      headers: {
        "Content-Type": "application/x-www-form-urlencoded",
        ...options?.headers,
      },
    },
  );
};

/**
 * Move item
 */
export const rssMoveItemPost = <ThrowOnError extends boolean = false>(
  options: Options<RssMoveItemPostData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>(
    {
      ...urlSearchParamsBodySerializer,
      url: "/rss/moveItem",
      ...options,
      headers: {
        "Content-Type": "application/x-www-form-urlencoded",
        ...options?.headers,
      },
    },
  );
};

/**
 * Get all items
 */
export const rssItemsPost = <ThrowOnError extends boolean = false>(
  options: Options<RssItemsPostData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    RssItemsPostResponse,
    unknown,
    ThrowOnError
  >({
    ...urlSearchParamsBodySerializer,
    url: "/rss/items",
    ...options,
    headers: {
      "Content-Type": "application/x-www-form-urlencoded",
      ...options?.headers,
    },
  });
};

/**
 * Mark as read
 * If `articleId` is provided only the article is marked as read otherwise the whole feed is going to be marked as read.
 */
export const rssMarkAsReadPost = <ThrowOnError extends boolean = false>(
  options: Options<RssMarkAsReadPostData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>(
    {
      ...urlSearchParamsBodySerializer,
      url: "/rss/markAsRead",
      ...options,
      headers: {
        "Content-Type": "application/x-www-form-urlencoded",
        ...options?.headers,
      },
    },
  );
};

/**
 * Refresh item
 * Refreshes folder or feed.
 */
export const rssRefreshItemPost = <ThrowOnError extends boolean = false>(
  options: Options<RssRefreshItemPostData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>(
    {
      ...urlSearchParamsBodySerializer,
      url: "/rss/refreshItem",
      ...options,
      headers: {
        "Content-Type": "application/x-www-form-urlencoded",
        ...options?.headers,
      },
    },
  );
};

/**
 * Set auto-downloading rule
 */
export const rssSetRulePost = <ThrowOnError extends boolean = false>(
  options: Options<RssSetRulePostData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>(
    {
      ...urlSearchParamsBodySerializer,
      url: "/rss/setRule",
      ...options,
      headers: {
        "Content-Type": "application/x-www-form-urlencoded",
        ...options?.headers,
      },
    },
  );
};

/**
 * Rename auto-downloading rule
 */
export const rssRenameRulePost = <ThrowOnError extends boolean = false>(
  options: Options<RssRenameRulePostData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>(
    {
      ...urlSearchParamsBodySerializer,
      url: "/rss/renameRule",
      ...options,
      headers: {
        "Content-Type": "application/x-www-form-urlencoded",
        ...options?.headers,
      },
    },
  );
};

/**
 * Remove auto-downloading rule
 */
export const rssRemoveRulePost = <ThrowOnError extends boolean = false>(
  options: Options<RssRemoveRulePostData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>(
    {
      ...urlSearchParamsBodySerializer,
      url: "/rss/removeRule",
      ...options,
      headers: {
        "Content-Type": "application/x-www-form-urlencoded",
        ...options?.headers,
      },
    },
  );
};

/**
 * Get all auto-downloading rules
 */
export const rssRulesGet = <ThrowOnError extends boolean = false>(
  options?: Options<RssRulesGetData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    RssRulesGetResponse,
    unknown,
    ThrowOnError
  >({
    url: "/rss/rules",
    ...options,
  });
};

/**
 * Get all articles matching a rule
 */
export const rssMatchingArticlesPost = <ThrowOnError extends boolean = false>(
  options: Options<RssMatchingArticlesPostData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    RssMatchingArticlesPostResponse,
    unknown,
    ThrowOnError
  >({
    ...urlSearchParamsBodySerializer,
    url: "/rss/matchingArticles",
    ...options,
    headers: {
      "Content-Type": "application/x-www-form-urlencoded",
      ...options?.headers,
    },
  });
};

/**
 * Start search
 */
export const searchStartPost = <ThrowOnError extends boolean = false>(
  options: Options<SearchStartPostData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    SearchStartPostResponse,
    unknown,
    ThrowOnError
  >({
    ...urlSearchParamsBodySerializer,
    url: "/search/start",
    ...options,
    headers: {
      "Content-Type": "application/x-www-form-urlencoded",
      ...options?.headers,
    },
  });
};

/**
 * Stop search
 */
export const searchStopPost = <ThrowOnError extends boolean = false>(
  options: Options<SearchStopPostData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>(
    {
      ...urlSearchParamsBodySerializer,
      url: "/search/stop",
      ...options,
      headers: {
        "Content-Type": "application/x-www-form-urlencoded",
        ...options?.headers,
      },
    },
  );
};

/**
 * Get search status
 */
export const searchStatusPost = <ThrowOnError extends boolean = false>(
  options: Options<SearchStatusPostData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    SearchStatusPostResponse,
    unknown,
    ThrowOnError
  >({
    ...urlSearchParamsBodySerializer,
    url: "/search/status",
    ...options,
    headers: {
      "Content-Type": "application/x-www-form-urlencoded",
      ...options?.headers,
    },
  });
};

/**
 * Get search results
 */
export const searchResultsPost = <ThrowOnError extends boolean = false>(
  options: Options<SearchResultsPostData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    SearchResultsPostResponse,
    unknown,
    ThrowOnError
  >({
    ...urlSearchParamsBodySerializer,
    url: "/search/results",
    ...options,
    headers: {
      "Content-Type": "application/x-www-form-urlencoded",
      ...options?.headers,
    },
  });
};

/**
 * Delete search
 */
export const searchDeletePost = <ThrowOnError extends boolean = false>(
  options: Options<SearchDeletePostData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>(
    {
      ...urlSearchParamsBodySerializer,
      url: "/search/delete",
      ...options,
      headers: {
        "Content-Type": "application/x-www-form-urlencoded",
        ...options?.headers,
      },
    },
  );
};

/**
 * Get search plugins
 */
export const searchPluginsGet = <ThrowOnError extends boolean = false>(
  options?: Options<SearchPluginsGetData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    SearchPluginsGetResponse,
    unknown,
    ThrowOnError
  >({
    url: "/search/plugins",
    ...options,
  });
};

/**
 * Install search plugin
 */
export const searchInstallPluginPost = <ThrowOnError extends boolean = false>(
  options: Options<SearchInstallPluginPostData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>(
    {
      ...urlSearchParamsBodySerializer,
      url: "/search/installPlugin",
      ...options,
      headers: {
        "Content-Type": "application/x-www-form-urlencoded",
        ...options?.headers,
      },
    },
  );
};

/**
 * Uninstall search plugin
 */
export const searchUninstallPluginPost = <ThrowOnError extends boolean = false>(
  options: Options<SearchUninstallPluginPostData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>(
    {
      ...urlSearchParamsBodySerializer,
      url: "/search/uninstallPlugin",
      ...options,
      headers: {
        "Content-Type": "application/x-www-form-urlencoded",
        ...options?.headers,
      },
    },
  );
};

/**
 * Enable search plugin
 */
export const searchEnablePluginPost = <ThrowOnError extends boolean = false>(
  options: Options<SearchEnablePluginPostData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>(
    {
      ...urlSearchParamsBodySerializer,
      url: "/search/enablePlugin",
      ...options,
      headers: {
        "Content-Type": "application/x-www-form-urlencoded",
        ...options?.headers,
      },
    },
  );
};

/**
 * Update search plugins
 */
export const searchUpdatePluginsPost = <ThrowOnError extends boolean = false>(
  options?: Options<SearchUpdatePluginsPostData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    unknown,
    unknown,
    ThrowOnError
  >({
    url: "/search/updatePlugins",
    ...options,
  });
};

